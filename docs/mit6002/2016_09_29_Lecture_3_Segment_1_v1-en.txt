...
Welcome to the first segment of lecture 3.
As we've said before, 6.00.2x is about using computation
to model and solve real-world problems.
One of the most useful tools we have for doing this
is called graph theory.
Before I get to graph theory, let me remind you
what this course is about.
It's about writing programs that help us to understand the world
and solve practical problems.
As we've discussed before, a computational model
is a program that produces results
that help us to understand and solve practical problems,
kind of to say problems we actually care about solving.
In the last lecture, for example,
we saw how to map the problem of choosing
what to eat into a careful description of an optimization
problem.
We then saw how we could design an efficient program
to solve that problem.
Modeling the knapsack problem was relatively easy,
because we did not have to capture any relationships
among the items.
We didn't have to ask how our hamburgers related to apples
or beer to hamburgers.
But life isn't always that simple,
and that's where graphs come in.
What is a graph?
A graph is a set of nodes, also called vertices.
So here we see a picture of a bunch of nodes.
The nodes might have properties associated with them.
Here I've used color as a property,
but they could be anything.
For example, if the nodes represented cities,
the properties might be demographic information--
for example, population, level of education,
anything you want.
The nodes are connected by edges, also called arcs.
In an undirected graph, often simply called "just a graph,"
the edges are like two-way streets.
The connection between nodes is symmetric,
like the friend relationship on Facebook.
If I'm your friend, you're my friend.
In a directed graph, the edges are like one-way streets--
i.e., the connection between nodes need not be symmetric.
It's kind of like the street system in Boston
where nothing is symmetric.
In both directed and undirected graphs,
the edges can be unweighted, as seen here, or weighted.
The weights might represent things
like the distance between the nodes
or, maybe in the case of a highway network,
the capacity of the road.
So why are we interested in graphs?
As I've already said, graphs are useful to capture relationships
among entities.
Almost any kind of relationship could
be modeled by a graph-- say, the rail links between Paris
and London, how the atoms in a molecule
are related to one another, or, as those of us who
watch television see over and over again, ancestral
relationships, as shown by family trees.
In fact, a tree is an important special case
of a graph, one we've already spent time
looking at in earlier lectures.
A tree is a directed graph in which each pair of nodes
is connected by a single path.

So why are graphs so useful?
Because the world is based on relationships.

We often speak of interconnected entities or relationships
as forming a network.
Now as a computer scientist, the first kind
of network that comes to my mind is a computer network.
And indeed all people designing or running computer networks
model them as graphs and use graph algorithms
to understand them better.
But there are lots of other kinds of networks that are most
actually viewed as graphs-- transportation
networks, financial networks, sewer
networks, political networks.
We read about criminal networks and social networks, et cetera.
The graph on the right side of this slide
is a model of a social network derived from the screenplay
for the movie The Wizard of Oz.
The size of each node and label is
based on the number of scenes in which a character shares
dialogue with others.
The color is based on the naturally occurring clusters--
i.e., communities that tend to interact mostly
among themselves.
Now we can view the size of the node, the color of the node,
and the label of the node as properties
associated with the node.
Interestingly, if we look at this graph, we can see,
though, the title of the movie, The Wizard of Oz,
would make you think the movie is about the wizard.
In fact, a quick look at the graph
shows that Dorothy is clearly the center of the movie.
As the main character, she interacts with four clusters--
her family in Kansas, the munchkins, the residents of Oz,
and the Emerald City.
OK On to a more practical application of graphs.

In fact, graph theory saves me time every day.
For many decades-- too many decades--
I have been driving from my home to my office.
Each year the traffic gets worse and I
am more and more desirous of finding a better route.
Of course there are many possible routes.
And until recently, I chose one based
upon my own recent personal experience and some intuition
about where the traffic might or might not be that day.
Recently my life has been changed by an application
that I just obey blindly that tells me
how to get from here to there.

So let's look at this.
So I'm getting from my house to my office.
What does the application do?
It starts by having a model of the road system
based upon a digraph.
The nodes are points where roads end or meet.
And the edges are just connections between the points.
Each edge has a weight indicating
the time it will take to get from the source
to the destination node for that edge.
And the big change in my life has been the fact
that those weights are now dynamically computed minute
to minute or maybe even second or second
based upon the traffic.
Once the graph has been built, we then
solve a classic optimization problem to supply a route.
That problem is the shortest weighted path between one node,
the node representing my house, and a second node, the node
representing my office.
You might wonder who invented the idea of modeling a road
system using graph theory.
And you might be astonished to discover
it wasn't Apple or Google or even MapQuest.
It was Leonhard Euler in 1735.
He did this in response to a problem called
the Bridges of Konigsberg.
Konigsberg, then the capital of East Prussia,
was built at the intersection of two rivers that
contained a number of islands.
The islands were connected to each other and to the mainland
by seven bridges, as shown by the map on this slide.
Reputedly the residents of the city
were obsessed with the question of whether it
was possible to take a walk that crossed each bridge exactly
once.
And don't ask me why anyone cared about that.
Euler's great insight was that we
didn't need that complicated map to understand the problem.
And it could be vastly simplified by a graph
by viewing each separate landmass as a point-- think
node-- and each bridge as a line-- think edge-- connecting
these two points.
It was an undirected graph, and we
didn't need to worry about weights on the nodes.
Notice that the model abstracts away
detail that's not relevant to the problem-- for example,
the size of the islands, the length of the bridges,
the capacity of the bridges, et cetera.
So what exactly is the problem?
Is there a path that contains each node exactly once?
Euler observed that for any such path,
each node except the first and the last
must have an even number of edges.
But notice that no node in this graph
has an even number of edges, hence we
have proved the theorem that we wanted to prove-- i.e.,
that there is no such walk.
Of course, the Konigsberg Bridge problem
is about as close to irrelevant as a problem can possibly be.
What's important here is not that Euler solved that problem
but that he invented a new way to think about a large class
of problems.
In the next segment, we're going to look at implementing graphs
and think about some classic graph optimization problems.
