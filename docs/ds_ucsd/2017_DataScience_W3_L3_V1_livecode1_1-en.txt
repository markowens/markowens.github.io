- Here we provide you a numpy notebook
to the basic image processing using numpy.
If you're looking for the notebook to locate it
you need to go in your victory folder and find
the satellite image analysis notebook.
Please locate the WIFIRE folder with the data
in there as well.
We pick satellite imagery because satellite imagery
is a very interesting image data to exercise this.
Okay.
You can go and read about all the image, the data source,
where it comes from.
The WIFIRE system here.
I'll go to the next line here.
Where we gather out tools together.
Like our other notebooks, we'll start by importing
numpy as np and scipy and matplotlib
in this particular case.
I go ahead and run that using shift and enter.
Next, we will read out satellite image as an ndarray
using the imread function.
This function is provided to us by python.
Here we import a data package and we'll use
the imread function and that's the WIFIRE folder
with the three layer image we'll be working with
that you have there.
If you look at the type of this data,
we'll see that it's an ndarray.
As we talked about before, this is an rgb image
and the type is ndarray because it will be turned
into an ndarray with three dimensions.
We use the type function to display that type
that it shows us ndarray of course.
Let's now plot the image in our notebook
to see it before we do anything with it.
Before set up a frame size of 15 15.
You can change that frame size the way you like
if your notebook is high resolution and things like that.
We'll use the imshow function in ski image
to display it.
Let's run this.
We see that image shows up.
That's great.
We see our colorful satellite image now.
But what are the dimensions of the ndarray?
Like I said, it's a three dimensional one
and beneath the user shape function, type function
won't be enough for that.
Let's run photo data which is the name we gave
to this array and shape as a function.
We see that 3725, 300 700 25 is the height
and width is 4797 and it has three layers for rgb.
Those are out three layers.
There's something interesting about this image.
Like many other visualizations, the colors in each
rgb layer mean something.
For example, the intensity of the red will be
an indication of altitude of the geographical data point
in the pixel.
The intensity of blue will indicate a measure
of aspect and the green will indicate slope.
To a trained eye, to a geo scientist, or a field modeler,
these colors will help to communicate this information
in a quicker and more effective way
rather than showing numbers.
So if we had to show the numbers for example,
let's go to the n4 line and uncommand that print function.
We would see a bunch of numbers.
It really doesn't indicate much if you didn't have
to use that.
If you had to just interpret those numbers
it would be difficult.
There is, by just looking at this colorful image,
a trained eye can tell already what the altitude,
what's the slope, what's the aspect.
So that's the idea of loading some more meaning
to these colors to indicate something more scientific.
Okay, once we load the image we can start exploring with it.
Let's check it's size.
We use the size function of the ndarray for that.
Like many other things we do, we'll check the maximum
and minimum of the data values
and maybe the average pixel value.
Here, we use ndarray's minimum function
and maximum function.
These values are important to verify since the eight bit
color intensity is, can not be outside
of the 0 to 255 range.
Using the ndarray or the image, the photo data variable,
we can check the rgb values for a pixel
in the image as well.
For example, we'll check here, the row 150 and column 250.
What are the rgb values at this column?
I'll use photo data, 150, 250 here.
We'll see that the values are 17 for r, 35 for g,
and 255 for b.
This particular pixel has a lot of blue in it.
We could have also selected one of these values.
If we want to select the green, photo data 150.
1012 the indexes, remember.
This gives us the second.
Index one will give us g, the green value.
So if I run that we'll see the green value is 35.
That's great, so these are typical ndarray functions
in numpy to work with the data.
Similarly, we can change individual values
of each pixel by assigning specific values to pixels.
Here, in this line, I'll go in.
Set that pixel that we just worked with,
row 250 column 250 to be zero.
In this line, photo data 150, 250 equals zero.
We just set all three layers to be zero.
So this image to be particularly black.
Of course we can display this image now
using the figure and imshow.
But it won't change much and be visible because we only
changed a single pixel which was this 150 to 250.
It was somewhere around this.
We can also try to change a range of pixels.
Let's try to do something bigger
and to set the values of the green layer to full intensity
for all columns within the low range of 200 to 800.
Row 200 to 800, so it should show horizontally.
Something like this.
We'll set every value from row 200 to 800 in all the columns
as we see in this range query to 255.
And only the second, the green layer, rgb,
one associated with green.
So just pause a second and think,
what would you expect to see?
We significantly increased the green value in these pixels
and it's, again, from row 200 to 800.
For all the columns.
You would expect, I hope, to see that horizontal
range or big bar that looks greenish than the rest
of the pixels around it.
Let's run this.
And we'll indeed see from row 200 to 800 for all the columns
we have a higher green intensity.
Our range assignment worked there.
Similarly, we could have set the range
I'll reload in this first line, I'll reload the image
because we just changed the image,
I was to set it back to it's originals.
So I reloaded it using imread to photo data again.
And here what we are doing is we are setting all the columns
and all the layers other than particularly
given other one of the 012 one of the three layers here.
All the columns in the range 200 to 800 for the rows
to be full intensity.
What would you expect to see?
I hope it's white, because all three colors are fully
intensified so that shows up as white.
If we run this, indeed we see that white bar there.
Of course, we could have done black by setting
instead of 255 to all three layers to be zero.
So we are muting down all of the colors.
Please now stop the video and play with the range and rgb
values to make yourself comfortable with this notation.
We will be using this notation quite a bit for the rest
of this notebook so it's important that you understood
everything up to this point.
Okay, now let's go to our next slide.
We'll start creating a bullion ndarray in the same size
by using a logical operator.
So we'll check the values of these pixels.
Like I've done before, I'll first reload the image
to photo data since we changed it a bit again.
And I would like to use the original image for the rest
of the notebook.
Let's print the shape of it.
I'll say shape of photo data and it's shape.
Here in line three we use a comparison
to select all values that are less than 50.
This will create the bullion ndarray of the same shape
with our original array.
Now that we have it we can use this new ndarray
like we did before to filter out pixels
with low intensity or I can call them
points of less interest.
Let's run this filter.
We see the shape of the photo data is equal to the shape
of the low value filter.
We generated that low value filter using a global
comparison operator for all the values less than 50.
So how the do we go filtering using this new low value
filter array?
Maybe we'll now use this array as an index to set
those low values to zero.
So here what we do is, we have our original data, right?
We'll show that first.
Then we'll apply this filter of low value filter
in our fourth line here to be zero.
We are not using the random here so we can get rid
of it but if you'd like to add a random
please uncomment that later.
And then after we apply the filter we'll plot the image
again and see if there's any difference.
This is our first image, the original image.
The next one, we applied that filter.
Although it's not very visible, at least to our bear eye,
there's a little intensity change in this figure.
But let's go back to the filter and set it to 200
and do the same thing.
We'll the that the image will really change.
Instead of less than 50, let's set these to be 200.
Now our low value filter is not quite a low value filter
because we have quite high values
that we are filtering there.
Anything less than 200, there's only 255.
We have that new filter and we are running the exact
same thing, we are applying this filter to photo data.
This was our original image.
We see that the next image filtered out a lot of those
pixels with low values for rgb
or values less than 200 in this case.
Now let's do some more operations using
the row and column indices.
Here, what they'll do is, we'll create range arrays.
It's going to be two of them.
One of them will be for rows.
So we'll get the length of the photo data.
We'll use the arange function to create these two arrays.
They'll be off class numpy and array.
So we create arange array called rows_range
in the first line.
We assign that same array to array called columns_range.
These arrays in the next cell
we use these range arrays to set the values of the pixels
associated them to have full intensity in all colors.
Which means to make the color of these pixels white.
Now if we plot this image, let's go back to our notebook.
We'll have photo data here, we are using rows range
and columns range.
We are using these two range arrays and setting
all the values in those pixels to 255.
Let's show our image.
We'll see a diagonal line, white line, because those
are the values we set going through a virtual square
in the left part of the image.
Here we see that's exactly what we've done.
We had a range array for the rows and a range array
for the columns and we set those as indices to this matrix
and set right here, we set assign
those particular pixels
0001,
001122
to be 255.
We see that as a diagonal line, a white line
from zero to about that 3700 range that we had.