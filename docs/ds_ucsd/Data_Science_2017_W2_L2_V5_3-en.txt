- In this video,
we'll be learning about dictionaries in Python.
Dictionaries are one of my favorite data structures
and I can't wait to tell you about them.
By the end of this video
you'll know how to create and use dictionaries.
You'll also recognize common dictionary pitfalls,
while understanding the inherent limitations
of an unordered collection.
Dictionaries are simply one
of the most useful data structures
when programming in Python.
You'll find yourself using them all the time.
Dictionaries are just Python's term for a map.
If you've worked in Java or C++,
you've likely worked with a map interface,
and you likely did so with a hash map implementation.
A dictionary holds a combination
of key value pairs.
Here, the keys are fictitious student IDs
and student names.
This is something you might maintain
for the students in a course.
You can use this data structure
to ask if a student ID is in the dictionary
and you can look up a student by their student ID number.
Speaking of lookup,
dictionaries are also super fast at doing lookups,
which is one of the many reasons
people like using this data structure.
In this example,
we have a string key
and a string value.
The only restriction on types
is that the key
has to be immutable.
Let's look at some more examples.
Here we have a mapping of courses
to the instructors who commonly teach that course at UCSD.
Notice that the value here
is actually a list.
You could even have a value be another dictionary.
Any object is fine as a value
in a key value pair,
and remember,
everything in Python is an object.
One more example.
What if we wanted to keep movies
and their associated user ratings?
Well, we can't just use the name of the movie
as the key because different movies
have the same title.
For example, Ghostbusters
was the name of a 2016 movie
and a 1984 movie.
So, how can I keep these in a dictionary?
Well, I could use the year to help disambiguate
and I could do that using a tuple.
Here's what this would look like.
The key is a tuple,
which is both the name of the movie
and the year it was made.
Tuples can be keys because they're immutable.
Those keys then map to the rating of the movie
which I borrowed from IMDB's current ratings.
I could honestly spend an hour
just giving you more examples of how key value pairs
are useful but that'd probably be overkill.
So, let's dive into to how to create
and use dictionaries in practice.
Just like with the previous data structures,
let's start by creating one.
Here, I've created a dictionary
with just the two Ghostbusters movies
and then displayed it.
Notice the curly braces when declaring a dictionary
and the colon which denotes the break
between a key and a value.
Next, let's look up a value using a key.
To do that we just use the brackets
and the key like an index for a list.
Lastly, we can use length or len
to check how many elements are in the dictionary.
To add to the dictionary,
we can just use a new key as an index,
and then assign it a value.
So, it's actually pretty easy
to add to the dictionary.
If Cars 2006 were already a key in the dictionary,
you'd just reassign it.
No errors were thrown.
Now let's inspect the contents.
We find that Cars was indeed added properly
but if you're wondering why Cars is in the middle
and not at the end,
that's what is meant by dictionaries
being an unordered collection.
There is no inherent ordering of the items in a collection
and you can't trust its internal ordering
not to change at any time.
The lack of ordering is part of the reason
dictionaries offer such fast performance
but if your problem requires preserving the order
in some way,
dictionaries may not be ideal for your problem.
To get back a value for a selected key,
you can use brackets, like I've done here.
But you need to be careful
with using this form of bracket access.
What if you asked for a value for a key
not in the dictionary?
That will actually cause a runtime error.
So, what's a safer way of getting values from a dictionary
if you aren't sure if the key is present?
There are two approaches which can help.
The first is to use the method get
to gain access to a value for a specified key.
Here, when the key is in the dictionary,
you'd get back the value just as you'd expect.
But if the key isn't in the dictionary,
we get back the value none.
You can then use the test is X equal to none
to see if the element was in the dictionary.
Similarly, you can also use the keyword in
to test to see if a key is in a dictionary.
Depending on your use case,
you'll likely want to use either get or in
to test to see if a key is in the dictionary
before accessing the element in the dictionary.
The key point is be careful
with using brackets to access values in dictionaries
if you aren't 100% sure the values will be in there.
We can also remove items from a dictionary.
I've set the dictionary to have all three movies
from our last example.
Then I used the method pop
to remove from a dictionary.
Here, I'm removing the 2016 Ghostbusters movie.
Pop will return the values associated with key
which is why I returned 5.4.
You'll also mutate the data structure,
so there's no longer the key and the value
that you just popped.
If we check,
the dictionary no longer has the movie we just popped.
You can also use the del command
to remove a key value pair
if you don't care about getting the value back.
Just like a list or tuple,
we can also iterate over the elements in a dictionary
by saying for i in dictionary.
Here, I'm printing out the keys.
If you wanted to print both key and value,
you want to do this.
The call to dict.items
returns a list of tuples with key and value.
By saying for key comma value
I'm asking to split each tuple
into a separate key and value.
Then I print the key and value separately.
I'm mainly showing this
so you know how you might get either the key
or the value or both.
You cannot mutate a dictionary object while iterating.
If you do, you'll get an error at runtime.
It's generally a bad habit in any language
to mutate a data structure while iterating through it.
The reason for is that
the underlying data structure implementation
may change its structure of the data
when you add or remove from it.
If you ever find yourself writing an iterator
for a data structure,
something we do in our computer science class at UCSD,
you see how problematic it would be
if you were trying to iterate while items
are being added or removed.
That said,
what do you do if you say,
want to go through the entire data structure
and find everything in a criteria
and then remove those items?
To do that,
we'll accomplish this in two steps.
In the first step,
I'll go through the dictionary
finding keys which match a criteria,
specifically I'll be looking for movies
which are made before the year 2000.
I'll add those items to a list,
and then in a second step,
I'll remove those movies by iterating through the list.
Let's walk through this in detail.
First, I've created an empty list called to_remove.
Next, I'll iterate to the keys in the dictionary.
Third, I'll check to see if the second element
in the key tuple, the year,
is less than 2000.
If it is,
I'll append the key to my to_remove list.
Now in our overall step two
I'll just iterate back through the to_remove list
and remove the keys in that list from the dictionary.
When the code is done,
we can check the dictionary
and find that the movies before the year 2000
have been removed.
I should know that there are slightly fancier ways
to do this
but I find this way to be considerably more readable.
Trap is up.
I hope you see now why dictionaries
are such a fantastic data structure in Python.
Going forward in the course,
we'll be working with some data structures
optimized specifically for data science,
so you may not be using dictionaries
as much as you would be
if you were just programming in Python alone
but I'll bet you'll still find them pretty handy.
In the next video,
we'll see how to use list and dictionary comprehension
to quickly build useful data structures.