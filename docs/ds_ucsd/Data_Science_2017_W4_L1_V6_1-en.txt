- In this video
we'll review the most frequent data operations
for subsetting, filtering, insertion, deletion,
and aggregation of data.
Having such efficient data operations
speeds up all algorithms that use these operations
and they are used a lot.
Let's figure out how to leverage these in Pandas.
By the end of this video
you should be able to handpick data,
both rows or columns, in a DataFrame
using Pandas methods,
add or delete rows or columns in a DataFrame
and perform aggregation operations
like groupby in DataFrames.
In all of the coming slides
we will use a toy DataFrame
that is present in each slide with the name df.
This is the first DataFrame that we see in this slide.
You can slice out the column of your choice
simply by providing its name,
like we see here for sensor.
We've reviewed this one earlier as well.
Filtering out rows based on a condition
is a very common task.
Here, we do df sensor greater than zero
to find out all the rows that have sensor2
in sensor2 that are greater than zero.
Adding a new column
is performed by using the name of the new column you want
on the left-hand side
and providing the value on the right-hand side.
In this example,
we create a new column called sensor4
by squaring the values of column and sensor3.
You can provide data on right-hand side
in a variety of formats.
I would encourage you to try adding any column
using values in a list, array
and see how this works for yourself.
Here,
in this slide,
we show you how you can leverage
the .loc or location function
to specify exactly which row
you want to add to your new data.
Notice, the right-hand side is a list of values
containing exactly the same number of values
as the number of columns.
Drop functions, as you've seen before,
let's you delete a row from a DataFrame.
You can use df.index to specify one or more rows to drop.
Notice how the right DataFrame
on the right is smaller
and has the fifth row missing.
As we've seen before,
del function intuitively lets you delete a column
simply using its name.
Sometimes there are columns that are not relevant
to your specific analysis
like we had for the timestamps in our ratings database,
so that data is the data you don't want
to consider in your analysis.
You can simply get rid of it using the del function.
Now, groupby is a very useful method
that let's you get combined statistics
about the DataFrame.
Here we show you how to perform groupby
using a student ID
and extract mean scores for each subject.
So, if the student took the same subject
more than a couple of times,
we can group them by
and take the average of the performance for the student two.
If you look at two,
it shows up now as average score
for that student ID two for each subject.
In summary,
Pandas has a vast array of efficient methods
to allow you to play with your dataset.
We have only discussed a short subset here
but we encourage you to explore at the link here
to find out new ways.
You will soon realize
with some experience that connecting these simple operations
can result in large and complex pipelines of analytics
that transform raw data
into something that we can analyze
and get meaningful insights from.