- In this video we'll be talking about Broadcasting.
Broadcasting is one of the more advanced features to NumPy,
and it can help make your array operations more convenient.
So by the end of this video, you should be able to
employ broadcasting to perform operations
on different size ndarrays.
Suppose you have a multi-dimensional array A.
And you want to add the elements in array B
to each row of A.
You've got a mismatch in the sizes of the arrays.
To solve this, you will likely find yourself
trying to figure out how to replicate B
three times so you can the computation that you want.
This mismatch in sizes, is the exact problem
broadcasting aims to solve.
Let's put some values in the matrix and into the array.
And if you just add A to B,
broadcasting will try to figure out
which dimensions you want to add
and we'll automatically see that
because of your number of columns in A
matches your number of columns in B,
it will effectively perform the computation
you likely wanted.
So A plus B, will add B to each the rows of A,
producing this result.
I will note that this is only for illustration purposes.
B actually retains the original shape
and that's part of the beauty of broadcasting.
Because B retains its original shape, no copy is involved.
This is actually a very memory
and computationally efficient operation.
So before diving into the notebooks,
let's go over the rules regarding broadcasting.
These are the rules directly from the NumPy documentation.
The rules likely follow your intuition.
Between the two ndarrays,
the dimensions either need to match
or it needs to be a scaler,
and it begins with of matching the trailing dimension,
and then works forwards.
A scaler value also applies.
As a scaler value has one row and one column,
so adding a scaler, effectively uses broadcasting as well.
So let's dive back into the notebooks and see some examples.
Now that we've seen broadcasting in principle,
let's work through a few more examples.
First, we'll create a four by three ndarray
and we'll fill it with zeroes.
Now we'll create a three by one array
with the values one, zero, and two.
And now we'll do the broadcasting.
We'll add the three by one array to our four by three array,
and we'll add the array, add rows, to each row of the start.
Because start was prefilled with all zeroes,
each row start now contains the values in add rows.
Let's do the same thing,
except we'll add to each column this time.
To do that, I'll need a four by one array,
which I'll build as a one by four array,
and then just use a transpose on it, denoted by T.
Now I'll add this four by one array to start,
and because I'm using broadcasting,
I should get back
the result which has the values from add calls,
in each column of start.
It's worth showing that our addition of a scaler value
like one, to start works fine,
as it will broadcast in both directions.
Broadcasting takes some practice and some patience.
It helps to draw out the matrices when you work.
I had the example from the video in the notebook below,
and it might be a helpful place to start.