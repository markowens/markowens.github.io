- String is a commonly used data type
because data science often involves studying text data.
In this video, we will review just a few
of the many useful string operations in Pandas.
For those of you who worked
through the Python basics a few weeks ago,
you'll recognize that many of these methods
are quite similar to the methods from Python's strings.
By the end of this video, you should be able to
describe what operations
the string methods can perform,
navigate your way to find the right string method for you,
and perform basic string operations in Pandas.
One of the most important string operations is split.
It helps with separating data into pieces
around a delimiter character.
For example, the city column in the df dataframe here
is split around the underscore character,
returning an object with arrays
of all the pieces for each row in the city column.
To be clear, the city field now
contains an array of strings
rather than just the string.
For the split function itself,
notice that city_0 has been turned into two strings,
city and zero.
The same has been applied for each string
in the city column.
The function contains,
provides a simple way
to check if a string has a given character in it.
We already used this in our
live video coding sessions before,
but let's look at this example when we check
if any of the values in the city column
contains two as a character.
We see that
only index two has it.
So, the result is a boolean series
with only one true value
for that index two.
Using the replace operation,
we can replace a substring with another one.
For example, we are replacing the underscore character
with two hashtags here.
The extract function will return the first match
for a regular expression it finds.
The top example here
is a regular expression to extract words
in a string and a bottom example
is how we can extract the strings.
In general, extract, can be a quick way
to get new features and values.
For example, you can use it
to build a numeric feature out of text data
like in the lower example.
In summary, string operations can be very handy
in data cleaning.
Please use the link provided here
to get started on exploring more string operations
to make yourself familiar with the rest of them.
Okay, now let's see a few string functions in actions.
As a reminder, the movies table
has the title and genres columns.
Both of these columns, however,
have composite information.
Let's use some string operations
to separate out the values here.
When I said composite operation,
I meant Toy Story has also the
year, and genres has more than one genre,
all stringed together by those pipe characters.
So, we will start by the split function
to convert each value in the genres
into a separate column for each movie.
We need to select the genres column
from the movies,
and on each row, or to that whole dataframe column,
we will use the split function, str.split,
with pipe as the separator.
Normally, the split function
will return a series of lists
by providing expand true option here that we have
given to the split operation.
We make sure the output is not just a series
of lists, but it's an actual dataframe.
We see it as a dataframe.
So, let me run this,
and ...
Display the first
10 rows in that new dataframe.
Okay.
You can also
add any column to detect each genre,
if it's comedy or not.
This will be handy when creating new features
in your machine learning course,
later in the MicroMasters.
What we are doing here is,
now we split
all the genres into a separate dataframe.
So, when we look at that, this would be normally
adventure, pipe, animation, pipe, children.
So, we have this dataframe
probably one of the rows has nine genres in it,
which is why we have nine columns here.
We will now add another one that says
"True or false", if the movie genres
is comedy, and it will call that column isComedy.
So, let's run that,
and select the first 10.
Now, we see that last column is called isComedy,
is added to the same movies genre dataframe,
and it has true or false values.
Lastly ...
Let's yet add yet another column called year,
and we'll separate out
the year from that title that we've seen
in the original dataframe.
So, what we'll do is,
we'll extract out, for example, 1995 as a separate column
instead of together with the movie title.
We will use the extract operation here.
We are selecting the title from the movies,
and they'll provide it a regular expression
similar to what we had in our stream editor discussion
in the Unix part, earlier in this class.
This regular expression here says,
"extract any value and within the parentheses",
in that string value that comes out of that movie
is title column for that row,
and if you remember expand-True
will make it a dataframe.
So, we're adding to the movie is dataframe,
not to this new one that we made,
movie genres one, but the original movies dataframe,
and we'll call that new column year.
So, what we extracted as the year
using this extract function and regular expression,
will be copied as a new column at the end of movies.
If you run this now,
let's go first run our extract operation,
then let's get the bottom of it,
we'll see that year is a new column here,
and it just gives us the year
that was mentioned at the end of the title
in a new column.
This could be pretty useful,
and we are doing quick grouping over that year.
All the movies in, for example, year 2007,
we'll need to group that by with that year column.
Initially, you couldn't do this
because it's a part of that title.
So, there are many other string operations, of course,
and your ability to work with text data
will often depend on your knowledge of these functions.
We can't list all of them
or give you examples on all of them, unfortunately,
but please spend some time going through
these operations at this link
that we provide here.
We'll also, of course, have some more examples
in the upcoming notebooks.