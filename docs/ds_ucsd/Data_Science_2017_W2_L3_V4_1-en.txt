- As you've seen in our live demonstration,
when we are redirecting command's output to a file,
there's a lot of files being saved
to transfer data from one command to the other.
Instead of that,
we can actually pipe the output of my one command
to another command
using something else in Unix.
In this video,
we will explain what a Unix pipe is
and review some special commands
that can transform what's piped into them called filters.
At the end of this video,
you will be able to describe what a Unix pipe is
with an example,
name five filter commands,
and differentiate between redirecting
the output and using a Unix pipe.
Simply put, a Unix pipe is a way to send the output
of one command to the input of another.
In this example Unix command
we pipe the output of cat command
to another Unix command
that counts the lines, words and characters in the output.
Now, please pay attention to this figure.
When a command sends its output to a pipe,
the receiving end for that output
is another command, not a file.
In most cases,
the receiving command will be triggered to run
without taking full advantage of the output
of the previous command.
However, in some special cases,
the command does something with the input
it receives through the pipe,
just like WC here to count the contents
of the file given to the cat command.
We call such commands filters.
So, a filter is a program
that takes inputs
and transforms its inputs in some way,
and the filter is placed after Unix pipe,
it takes the output of the command
on the other side of the pipe,
and uses it as an input.
Grep, more, less, sort and uniq,
as we've just seen,
are all commands in this category.
Grep will search for lines
with a given string
or look for a pattern in a given input stream.
More, as you've seen,
will show you as much as fits in your shell window,
and similar to less.
Sort will sort lines alphabetically or numerically
in your input stream,
and uniq will give you the unique lines
in your input stream.
But the main thing is all of these commands
will transform their input
in one way or another.
Let's go over some of these pipes and filters now
to understand what they are doing.
Ls minus la piped into more.
Sometimes when we see the output of ls,
there so many files and directories
in that directory, it's not going to fit in your shell,
so if you simply pipe that to more,
you'll see
partial outputs of ls minus la,
and by pushing space as we've done in our last video,
you could see the rest of the lines
or files and directories in that directory.
The next one we have cat filename
piped into wc.
Here we'll see the lines, words, characters,
the number of lines, words, characters
in the output of cat,
and namely the content in the contents of filename.
The next one is the manual page for the cat command
piped into a grep file.
What grep does here
is it's gonna look for the occurrence of file
in each line
of the manual page for cat.
So, you'll have
the output of man cat
and be able to see
only the lines in that manual page
that involves
the file text in it.
The next one, we have the ls, the output of ls
and we are looking for txt in that output,
so each line
that has txt in it,
will be output by grep
but we don't stop there.
Then that output gets piped into wc
and the number of lines in that wc output
will tell you how many text files
were in that directory that we ls'd actually
if you were trying to count the number of text files there.
And our last one nicely combines
redirection
and
the pipes.
So, we here see
who
piped into sort,
who is logged in your Unix system at that time.
The sort command will sort that alphabetically
and write that into a file called current_users.
An interesting thing is
you can string together multiple pipes
just like we've done on that fourth line
and create a small script.
So, these double pipes here
were used for that purpose.
In the next video
we'll execute some of these pipes
and filters,
and explore some datasets
using these commands.