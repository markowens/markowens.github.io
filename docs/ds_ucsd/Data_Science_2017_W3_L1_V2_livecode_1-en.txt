- Now that you've finalized your Jupyter notebook setup,
and we've reviewed some background on Jupyter,
let's get started with the notebook environment.
The first page, we are at, is called a dashboard.
It basically lists the contents of the folder
you launched Jupyter notebook from.
You can navigate around your file system
through this dashboard,
just like any other file explorer interface.
And note here, is that this file system is where,
the Jupyter notebook server is running.
It could even be on another machine.
If you don't use the local host as the server
in your laptop locally, you'll simply see
another interface.
At this point, I would like to remind you
to follow along if you haven't already started doing it.
We know one of the biggest obstacles to success
in online classes is getting started working
with the infrastructure, and your learning environment.
So I really want you to do this with me.
We are just going to get our first notebook started,
run some initial code, and add some documentation.
It shouldn't take you much time,
but it will get you up and running.
If you get set up now, for the rest of the course
you'll be able to follow along in notebooks
with the material we present,
and play around with the code yourself.
Okay.
Now, let's create a new notebook, with the New button,
on this upper right corner.
Here, we will select Python three as our Python version.
Now I have a new notebook.
And I click on Untitled on top, to name it.
I'll just name it to be Intro Notebook here.
So we renamed our notebook.
Now, if we go back to our dashboard,
we will see that there's a new notebook,
a file called Intro Notebook.ipynb.
That's the new notebook we just created and renamed.
In the beginning, there's sometimes some confusion
as both the notebook application and the notebook
are called notebook, but they are separate.
The notebook application, is a web application
that creates the interface in the browser,
and executes Python and other languages' code.
The notebook file is a file format
with the ipynb extension that saves code, images,
and text in a single document, easy enough to be shared.
As we said before, this feature has gained
lots of popularity in data science.
You probably realize this, but the Intro Notebook notebook,
is in a different browser tab, in your browser.
Any new notebook that I open will be in a new tab
like this, and you can have many open
at the same time.
Now let's get started with coding
using the code cells.
Hopefully, you're following along,
but please feel free to pause the video
and try each step I show you, if you fall behind.
It is normal to take some time in the beginning,
so don't worry if it's causing some confusion at times.
I will now click on the first cell.
It's just simply click the mouse in the rectangular cell,
in the notebook, and type Python code.
Like I can say, print("Hello World!"),
which is our traditional greeting
in any computer science programming course.
So I can run this code in a few different ways.
One is, I can go to the toolbar on top,
and push the Run button.
I should just get the result as we see here,
Hello World was printed.
Or I can reclick on that cell,
and Enter, Shift Enter simultaneously,
it should run the same cell.
Note that this is executing code in a Python process
called the kernel, so there is a kernel running
in the background for each
open notebook or browser tab basically.
The Jupyter notebook application
talks to the kernel to have it load data
and execute code.
Shift Enter, or that Play button,
creates another cell just below the first one,
while we are executing it,
or while the kernel is executing it.
So this one here, is the second cell we have.
So we can see that a Jupyter notebook
is a collection of cells, some including code
like we just did.
Now that we have learned working with cells,
let's execute more code.
For instance, you can use the notebook
as a calculator.
A question we can ask here is how many seconds
are in a year?
So we need to count the number of days times 24 for hours,
times 60 for minutes, and 60 for seconds.
Remember, we run it either by the Run button
on our toolbar here, or, Shift Enter.
So I run it by saying Shift Enter,
and I got that big number in the output here.
So, you might have noticed, when I print something,
it shows up as a text right under my code cell.
And, if I just run a calculation without an assignment
or a print statement like I did here,
it comes up as an output line.
Here we have the Out [3] line for that number.
So that number is kind of difficult to read,
it's a large number, so let's convert it to millions.
To do that, in the next cell, I'll type _ / 1e6,
and I say Shift run, we see that the output
is turned into a number in millions.
So here let's explain what I've done.
Underscore refers to the output of the last cell executed.
So since we executed that In [3] line before,
we are using the shorthand scientific notation
for 10 to the power six,
to convert it to a number in millions.
So then we run it, and it's like 31.536 million seconds.
So this is a little better and easier to read.
So now I'm thinking, what about a leap year?
Because leap years have 366 days.
The good thing about the Jupyter notebook,
is you can go back to a cell and update it
and run it again.
So what I'll do to look for a leap year,
is I'll simply say go to that In [3] line,
and it shows, those numbers show the order of execution.
And I'll go and update that line,
instead of 366, to be, 65, to 366.
So, after we modify the cell,
we will calculate the seconds with the new question
on how many seconds are there in a leap year
in this case.
So I go say Shift Enter, and we see that number
has changed, but since we haven't executed
the next cell, the number in that hasn't changed yet.
But the environment put us in the next cell,
so we can rerun that same cell again.
So we have that In [4] line,
an we know that In [5] was executed after that,
because the number in there is sequentially larger,
so I'm going to say, Shift Enter,
in that In [4] Line now it's In [6]
and we know that number has been updated.
So good.
But, maybe we'd like to have
both of them inside our notebook.
I wanna have the question for how many days
are there in a leap year and I also wanna have
the regular years.
Then what do we do?
Here, we can just copy and paste the code cell
to have separate cells for the code related
to both questions, instead of updating the cell completely.
To do this, I'll use the cut and paste buttons
on the toolbar.
So I'm gonna go to that cell, and I'll click on that
In [5] line, the cell that associates to that.
And here, I'll have cut and paste.
I'll simply copy, and I'll push paste,
right next to the copy button, so now I have two cells.
In the second cell, I can say 365 times 24
times 60 times 60, and I'll rerun that.
I'll have, the answers to both questions
on how many seconds are there in a year,
in a regular year and a leap year.
Of course I need to do the same then, for,
the million conversion one,
so I can go and say, paste here.
I need to click on the cell above where I wanna paste it.
So if I go now to In [5], and go through as Shift Enter
to run that, Shift Enter to run the next one,
Shift Enter to run In [7],
now it turned to be In [10],
and Shift Enter to run the last line.
We have everything nicely executed in a sequence.
So until now, we used code cells with only one line.
But, actually, the code in that code cell
doesn't have to be one liners,
as we have done in our quick examples.
You can do any type of Python code in the notebook.
Sometimes it could be as simple as importing a module,
sometimes it could be printing a variable,
or creating sophisticated analysis or graphs.
But let's go with a two liner now.
If you run, in there, any Python code,
I am now clicking in that last cell.
If I simply say that, x = 4 + 3,
and in the next line, print (x).
Now, when I run it by Shift Enter, the environment will run
that block of code.
So something you'll notice.
When I click on this, if I go with,
my up and down arrows, I can move between
different lines of code.
And once I come to the top line,
I can go to the cell above.
But, this could be a bit of a challenge
when I have too many lines
and you wanna quickly switch between
different code cells, and maybe wanna move around
a few cells up and down quickly without using your mouse,
just through your keyboard.
For that purpose, the notebook interface is implemented
to be modal.
That means, if you do Escape in the cell border,
just like I'm gonna do here,
Escape in the In [12] Cell that we have there.
You can now use the up and down arrows on your keyboard
to change cells.
So, my cursor before I've done this,
was in that print (x) line,
so if I wasn't in that Escape mode,
where my cell is highlighted as blue,
if I pushed the up arrow I would go into that
x = 4 + 3 line.
Now, I can just push the up arrow
and move between the cells.
So it's a very useful feature.
I can go and execute these,
and it's still in that model mode.
So now, how do we get rid of some of these cells?
Let's click on our code cell, in the bottom.
It turned green, for us to type.
I'll say, print and I'll call that string temp.
I execute this.
Now, maybe I wanted to do a quick check of something
and I don't want that permanently in my notebook.
I can just click on it, and,
simply here, say Cut, in the upper toolbar,
and it's gonna get deleted.
Let's end our code cell introduction here,
so you'll see more of it as we go through the weeks,
and next we will actually look at some special cells
called markdown cells in a notebook.