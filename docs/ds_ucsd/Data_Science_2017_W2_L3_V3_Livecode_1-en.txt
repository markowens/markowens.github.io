- Hello.
In this video I'll just review
some of the standard IO redirection commands
that I explained in our previous video.
Here were are, if you remember from our first Unix shell,
we needed up at Python For Data Science,
My First Directory folder.
Right, it's directory created.
And I can see that by typing pwd
I can also ls in this directory
and see the contents of it,
and as you might remember,
we had two files, fruits.txt and shakespeare.txt
moved into this directory.
Now I'll use the cat command
to display the contents of fruits.txt.
And I see that there's about eight/nine lines in there.
If I do the same thing to shakespeare.txt,
you'll notice something interesting actually here,
that's it's not going to fit in
the shell, so it's gonna quickly go through the file,
all the 12,000 something lines in this file,
and it's going to bring me back
to the end of it,
and I'll only see the end of the file.
How do I get around this problem?
There is another command called more in Unix,
and as you might remember,
the man command
is yet another command in Unix
to look up the manual pages
of all these commands.
So, if I say man more,
I'll see
the description of the more command, for example,
or if I say man cat,
I'll see the description of the cat command.
So, if I say man more I'll see that this command
is going to give me however much fits in my Unix shell.
So, I can instead of cat shakespeare.txt,
I can say more shakespeare.txt.
Starting from the first line
that starts with this is the 100th Etext file blah blah,
I'll see however much fits in my shell
about that shakespeare.txt.
So, by just pressing the space key
in my keyboard,
I can go through this file
and look at all the lines in this file
or I can just get out of it using Q.
So, then there's a difference, right?
We said cat shakespeare.txt,
it goes through the whole file,
we can't see the beginning of the file,
we can of course scroll back up using our mouse
but we don't want that,
and we can also say more shakespeare.txt
and see the file as much as fits in our shell.
So,
why is this useful?
Because we want to go through the file,
and sometimes these longer files,
we wanna do something with it, right?
We wanna maybe sort this file
or count the lines in this file.
So, let's say I wanna sort
the contents of fruits.
Sort is a Unix command.
We can use it for quick data manipulation.
I'll say sort fruits.txt.
I'll see the contents of fruits.txt
all sorted in alphabetical order.
So, now I'll take
the sorted file,
fruits.txt,
and I'll save it to yet another file.
The thing to use here
is the standard out redirect
greater than symbol
and I'll call that file
fruits-sorted.txt.
So, I don't see anything in my standard out
because I redirected the standard out to this file.
If I cat fruits-sorted.txt,
of course, we can just give the file name
to the cat command as you've seen before
or cat actually can accept
the input to come from a file
that's redirected to it
like fruits-sorted.txt.
Here I'm doing an input redirection,
standard in redirection to come from fruits-sorted.txt.
I would see the contents of that file.
So, it's the same with the standard output of the command
that we've seen before.
So, the next thing I'll do here
is to actually
manipulate this file even more
and
get only the unique lines
in this file.
So, I can
look at fruits-sorted.txt,
and get the unique lines in it.
So, here we see double apples, double peaches gone now.
We only have apples, grapes, melon, oranges,
peaches and strawberries, six lines there.
So, there are six types of unique fruit names
in this file.
If I'd like to save that to another file,
I'd say uniq fruits-sorted.txt
and redirect the output to
fruits-unqiue.txt.
So, I can quickly cat the contents of fruits-unique.
We see that it's the same
at the standard output of the command.
If I ls now into my directory,
I'll see four files instead of just fruits.txt
and shakespeare.txt.
I'll see fruits-sorted and fruits-unique.txt.
Why would this be useful?
Because there's a lot of Unix commands
that I want to quickly save the outputs to a file,
and maybe count them.
In this case, how would I count the number of unique fruits?
That would be counting the number of lines
in fruits-unique.txt,
and if you would remember
from our earlier video,
wc command has a -l option
to give us just a number of lines in that file.
So, I would say wc minus l or dash l,
and fruits-unique.txt.
It's gonna give me six as the number of the lines.
So, there are six unique file names
in the fruits.txt,
in our original fruits.txt.
So, you could see that we are already
doing some data exploration using Unix commands.
We had a file with a bunch of fruit names,
we wanted to see
how many unique fruit names are in that
or we could see the sorted options of that,
so we are doing something with this,
if you treat that file as a dataset,
we are manipulating that data
and exploring with it a little bit.
So,
I could also use this command.
Let's say I could use the who command in Unix.
It shows me who are logged into the Unix system
I logged in at the time.
If I just say who,
I'll see three altintas
because I have three shells open.
I can just say
redirect the output of this command
into a file called names.txt,
and I see here that
all these names
are saved into names.txt
in my shell.
How would I use that?
I might maybe go through that
and email all the users logged into the users
at that time.
There's lot of Unix commands
that take advantage of the standard in.
After this maybe I would say
I would give these names as a standard input
to another command and get those names
and maybe use the mail command
to send a standard message to these users,
and things like that.
I can actually manipulate these files
and by redirecting the right outputs to the right files
I can use that
to generate a dataset
for using in yet another operation.
But how do redirects work?
Another thing I want to show you is
groups of commands
executing together
and redirect applying to
the command that it gets coupled with.
To command two strings together,
I can say pwd
and
then execute ls minus l right after that.
If I use the semicolon operator
or character after pwd,
it says execute pwd
and right after that execute ls minus l.
It's like typing two of these commands
one after anther on the shell.
So, I'll see two outputs here,
and I'll see
the output of pwd
and then I'll see the output of the ls minus l operation
that we just typed.
Now let's say I wanna redirect the output
that I've sent from these two commands
into a file called out.txt.
Just think a second.
What would you expect to see in the standard out?
What you will actually see
is the output of the first command
because this redirect operator here
with out.txt,
only applies to the command it's bundled with.
If you want all of these outputs
to go into out.txt both pwd
and ls minus l outputs,
we'll put them in a parenthesis.
So, I can say ls minus l,
and then redirect that to out.txt,
and now if I cat out.txt,
I'll see all the outputs of these two commands
were redirected to that out.txt.
So, we are actually creating a composite command
by stitching together these two commands
and putting them in those parentheses.
There's one last interesting thing
I'd like to show you about
a construct in Unix that we use.
We can actually suppress these redirected outputs
by sending it to the null device.
It's like /dev/null.
So, in this example,
I could have just said instead of out.txt,
I could have just said send the output
to /dev/null to /dev/null
and it's not going to go anywhere,
it's just going to be ignored.
It's not going to be seen on standard out
and it's not gonna go to a particular text file.
So, there's a Unix program
which I'll give you when I ignore somebody,
you would just tell them
I'm redirecting you to /dev/null
and this is where this comes from.
So,
we just reviewed standard IO
and redirections.
I hope you'll be able to exercise with these redirects
more on your own
and in the next video,
we'll review some other interesting Unix features.