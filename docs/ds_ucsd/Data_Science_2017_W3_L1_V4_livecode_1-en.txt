- So, in this video
we'll talk a little bit more about how to format
and comment out our Notebook better,
and use some imagery and markdowns around that imagery.
We will learn about plotting in Python later
in this class on week five,
but if you bear with me here
and please do not worry if you don't understand a code,
I would like to show you how an image is generated
inside the Notebook in a code cell
and how we can use markdowns around it
to explain that cell.
So, I'll go to my Notebook.
You see that last line.
If you click on it
and if you're not sure if it's a markdown
or a code, you already see in here
indicating it's a code
but you can also check it simply
through this markdown dropdown in your toolbar.
So, here I'm just gonna use
a simple matplotlib function called plot.
I need to import some of that,
and it says basically
import py plot
and
plot function
and we'll use
that plot function to just plot out a vector,
0,1,0,1, four values in it.
If I say shift run here
I'll see the graph being generated.
So again, we had four values,
0,1,0,1, we just plotted that out
using a simple matplotlib function.
We'll see more of that to have you use matplotlib
to create visualizations and things like that
later in this course.
So, now maybe I wanna explain this graph.
How would I do that?
I'll click on the cell, the code cell under it,
and I'll convert that to a markdown.
I can simply write
this is a plot
using
matplotlib
of a vector, okay?
That's it.
I'll just round this one.
So, I can see that my text actually
is right under that graph
and explaining that graph further.
Let's go a little bit up in our Notebook.
Again, to do that I'll just use escape
and I'll use my up and down arrows
to move between cells.
I wanna go back to that first question we calculated,
how many seconds are there in a leap year?
This is just code
and above it I'd like to add a line of text using markdowns,
to explain what that code was for
or what I'm trying to do there.
So, I'll go to the cell above that cell
which says in eight here.
I'll go to that in two cell
and I'll go to my toolbar and click add.
Here I can click on the new cell that I added,
convert that to a markdown
and say
below is
how we
calculate
the number of seconds
in
a leap year.
So, if you run this
we could see that we are nicely documenting
and I haven't changed much
but I'll just keep running through the Notebook
to see how we can run everything in it
using shift enter one by one.
It puts us to the next line at each time.
So, now we are done with our Notebook.
We need to save it.
Of course, the Notebook, actually application
saves checkpoints as you're typing
but if you wanna make sure
you can also just say save
or use that save button
and you'll see that a checkpoint was created here
when I used the check pointing,
so if I wanna go to that version of the Notebook
at that checkpoint
I can go and click on that later on.
So, let's now close our browser tab.
We are done with our Notebook,
we saved it
and let's now close the browser tab
and go to our dashboard.
On our dashboard
we see that green Notebook
right next to our Notebook file,
and it says it's running,
so although we closed it,
the kernel that's running the Notebook is still running.
So, since it's running
we can just click
and open it easily.
So, now if we want to make sure
the kernel is not running once we close our Notebook,
maybe we won't be working with it
in the near term
and we wanna make sure everything is nicely saved
and closed,
we can go to File,
and there we can say Close and Halt.
So, when we go back to our dashboard now
after closing it
you'll see that green Notebook
turned to some grayish color
and the Notebook is not running anymore.
Of course, to run it
we just need to reopen the Notebook
and remember, the kernel was closed
but when I look at this Notebook overall,
everything that I have done before persisted,
so once it's run,
it persists until I go and rerun the Notebook,
so if I shared this with a collaborator,
they'll be able to see my outputs
but then they can change it and re-execute it
or they can re-execute the same amount
by doing shift enter.
They can even do something like restart and run all
under the kernel.
So, there are different run options for this kernel.
Another thing I'd like to talk about
is let's say you did your analysis
and you'd like to send it to your colleague,
they can of course give you analysis
as if it were a report
but also they can rerun it on their machine
or modify the Notebook easily.
What if you really would like to save
a non-executable version of the Notebook
and keep it in your archives?
We can do that by going to File menu option here,
and you can download the Notebook
as a number of different formats
and this one I'll do an HTML.
So, when I download this Notebook
that we just created as an HTML file,
you'll see that the Notebook looks like
we wold see it in the Notebook application
but it's an HTML file
without any name on top
and the toolbar on top,
which is not editable.
So, we have a version of the Notebook
that can be archived the way it is
with your outputs of when you last ran that Notebook.
So, it makes it also easier to keep a record
of the results and per system over time
or if you have collaborators
who would just like to see non-executable results,
you can share HTML files or PDFs
through the Notebook interface.
With this we'll end our Jupyter introduction
and in the rest of the course
we'll show you some other Notebook features
as we go through more sophisticated Python modules
for data science.
Hope you'll enjoy the Notebooks as much as we do
and follow along in all the notebooks
we show you for different applications.