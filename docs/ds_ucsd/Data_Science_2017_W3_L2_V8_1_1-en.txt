- We said at the very start of this lesson
that numpy is valued for its speed and its functionality.
So far we've been focused on showing you the many operations
and built in functions in numpy.
I want to take a moment and just show you a basic speed test
between numpy and lists.
By the end of this video, you should be able
to describe the speed benefits of ndarrays over lists.
Although I can talk about the benefits of ndarrays,
particularly with them being space efficient
and memory optimized, I think
seeing the speed difference goes a long way.
To do this test, we'll be using Time It
to measure the execution time of our code.
We'll plan arrays or lists with one million elements,
and we'll plan a repeating inoperation of summing
all those elements 1,000 times.
We'll set up the ndarray to have the values
from zero to size minus one.
Again, this is class ndarray.
Now we'll do the timing.
Let's see how long this takes.
This took about one millisecond.
Remember that this is running a sum operation
on an array with one million elements.
Let's see how that compares with using a list
for the same computation.
We've created a list with the same values.
It has a class list, and now
we'll see how long it takes to run.
Feels like it's taking a little bit longer doesn't it?
In fact, this took an order of magnitude longer
than it did with the ndarrays.
Right?
So for numpy, that was about one millisecond,
and for the list it was roughly 13 milliseconds.
That's an order of magnitude.
An order magnitude is a big deal.
This is for a pretty small array.
We'd actually see a bigger impact
if we working with larger data sets.
Hopefully the videos and the notebooks
in this lesson have highlighted the value of numpy
both for speed and for its functionality.