- In this video, we'll start defining functions in Python.
Functions in Python, like other languages, allow us to
abstract away details from subtext into
separate code sections.
So that in this video, you should be able to create
Python functions and recognize the implications
from Python being passed by value.
Okay, on the left, we have C code for
an absolute value function.
Notice that it tests to see if the input value is
less than zero, and if it is, it makes the value positive.
As a result, it returns the absolute value
of the function parameter, val.
Here's the equivalent Python code.
So, lots of similarities, functionally.
Well, let me point out the differences.
First, def is a key word to denote that you're
defining a function here.
The first line overall says that you are
defining a function: my_abs,
which takes an input value, variable val.
Notice that neither the return type nor
the type of the input parameter are defined.
This has some advantages and disadvantages.
The advantage is you don't need to write a
my_abs function for ints, another for doubles,
another for floats, and so on.
The disadvantage is you would try to call
my_abs and pass it, say a string, and
that could cause problems.
There may also be some issues
with the expected return type.
But we'll revisit this in in a few minutes.
For now, let's see how this runs.
So this code will print the value 7.
We define the my_abs function just like we
do before and now I am printing the output
of that function, when we use -7 as an
argument to the function.
The absolute value of -7 is 7, so this works properly.
Now, let's look at that example I mentioned before.
I'll try to pass the function string high,
as an argument.
In a tight compile language like C or Java,
the compiler would have caught the tight mismatch,
and we wouldn't have been allowed to pass
a string to a function expecting
a numeric argument.
But in Python, this problem doesn't come up
until run time, when Python can't find a way to
compare a string to an int, and when
I try to run this Python code, this is the
output that we get.
All right, let's do another example.
Here I've changed our function to print the
absolute value of the parameter instead
of returning the absolute value.
What do you think will happen when this runs?
This is a bit tricky, so pause, take a moment
to think about it, and come back.
You may have predicted running the code
would produce an error because we try to
assign x to be the output from the function,
and this new function doesn't return anything.
But it turns out that if a function doesn't
return anything, it effectively returns none in Python.
Since we can assign a variable to none,
this code still runs just fine, though you
may have wanted x to have a value, not none.
All right, one more of these.
What do we think this code will do?
Again, pause, think about it, make a prediction,
then we'll talk it through.
The output here is 7.
If you guessed 8, don't worry.
This is a really common misconception.
Let's talk this through.
First, x is a sign that the value is 7.
This translates to a variable x being created
which points to an integer object with a
value of 7.
Next, we'll call the Python function in
current value.
Increment value is given,
x is an argument.
So when we call inc_val,
a new variable, val, is created.
Val is going to point to the same int object as x.
This is what we mean by copying the reference,
copied by value.
Val and x are not the same variable.
Val is just a copy of the pointer which
means that it points to the same thing as x.
Now, let's look at val being
assigned to be val + 1.
This operation will cause val to be
reassigned to point to a new PyIntObject
with a value of 8.
Notice x hasn't changed here at all.
When the function inc_val finishes,
the temporary variable val,
which was created just for the function,
will go away.
Now we're left with just x.
So when we go to print x, we'll then get
back the value 7, which is just what
we would expect.
If we call the function on the variable val,
rather than having it reassigned with the equal sign,
we have experienced different behavior.
Specifically, if you change the object pointed to by val
and x, both would appear to change since they point
to the same thing.
We'll do an example like this later.
For now, let's do a couple more practice
problems with functions.
We'll get to that soon.