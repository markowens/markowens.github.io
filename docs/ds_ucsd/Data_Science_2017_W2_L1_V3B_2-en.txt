- In the last video,
we started seeing how variables work in Python.
In this video, we'll continue working with objects.
By the end of this video, you should be able to
create objects and call methods on those objects.
So let's start working with objects a bit more.
The command here, x equals hello--
we'll build an object just like we're used to.
In this case, the object is a string, and strings in Python,
similar to languages like Java, are immutable.
Which means they can't be changed.
Also, similar to other languages,
there are built-in methods that you can call on strings.
You can always look at the reference for a full list,
but here are a couple of examples.
The first of these methods returns
a string with a capitalized first character,
but not the rest capitalized.
The second appears to return a copy, which is lowercase.
In both of these cases, the method returns
a copy of the original, which has now been changed.
To call a method in Python, we use just a period after
the variable name, the method name,
and any parameters to send to the method.
Like we have x dot lower and then
parentheses in the example here.
Remember that I said that strings weren't changeable.
So let's look at the value in variable x
after we've run this code.
Turns out, it still holds the original value.
If we want to change x so it has all lowercase letters,
we'd have to do this.
First, we have to declare x like we did before,
now we're gonna say, x equals x dot lower.
To understand this, we'll work this through
just a little bit more step by step.
When we call x dot lower,
it returns a new string object,
which is a copy of the original,
with all the letters lowercase.
For now, we can visualize that by adding this new object
with a lower case hello to our memory diagram.
Next, let's focus on the assignment of x.
By saying x equals x dot lower,
we set x to point to the object
created by the method lower, like this.
So after hooking up x
to point to the new object with lower case hello,
x should now have a value of a lower case hello.
And it does.
We'll be calling methods on objects throughout this course.
So if you're a bit confused, don't worry.
You'll see a lot more of this going forward.